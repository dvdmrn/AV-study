# -*- coding: utf-8 -*-

import tables

import numpy as np

from signals import *

import os.path

class HDFSignal(Signal):

    def __init__(self, filepath):
        Signal.__init__(self)

    def __init__(self):
        Signal.__init__(self)

    def __checkFile(self, filepath):
        if (not os.path.isfile(filepath)):
            raise SignalException(SignalErrors.FILE_NOT_FOUND, "File not found!")

        name, extension = os.path.splitext(filepath)

        if (extension != ".hdf"):
            raise SignalException(SignalErrors.FILE_NOT_FOUND, "File extension must be .hdf!")

        return True

    def _resetVars(self):
        Signal._resetVars(self)

        self.__hdf_file = 0
        self.__file = ""
        self.__fps = 0
        self.__branch = "/animation"
        
    def setFile(self, filepath):
        self._resetVars()
        
        self.__checkFile(filepath)
        self.__file = filepath

    def loadFile(self):
        if (self.__file != ""):
            self.__hdf_file = tables.openFile(self.__file, mode = "r")
        else:
            raise SignalException(SignalErrors.FILE_EMPTY)

    def loadData(self):
        """
        Loads data from file and calculates the FPS.
        The hdf file loaded must contain a node called "time_vector" to make it work.
        """
        
        if (self.__hdf_file != ''):

            try:
                #calculate the fps
                timediff = self.__hdf_file.root.time_vector[1] - self.__hdf_file.root.time_vector[0]
                self.__fps = np.around(np.power(timediff, -1))
                
                if (self.__hdf_file.__contains__(self.__branch)):
                    self._data = self.__hdf_file.getNode(str(self.__branch))[:]
                else:
                    raise SignalException(SignalErrors.INVALID_FORMAT)
                
                print "File fps: ", self.__fps
                
            except:
                
                self._resetVars()
                raise SignalException(SignalErrors.INVALID_FORMAT)
                

    def generateAnimation(self):
        
        Signal.generateAnimation(self)

        if (self._data.size > 0):

            self._animation_data = self._data.__copy__()

            #normalize data
            self._animation_data.__idiv__(self._animation_data.max())

    def setAnimationBranch(self, branch):
        """
        Sets the node from where the data will be read
        """
        
        if (branch != ""):
            self.__branch = str(branch)
        else:
            self.__branch = "/animation"

    def getHDFFile(self):
        return self.__hdf_file

    def getFPS(self):
        return self.__fps

    def getAnimationBranch(self):
        return self.__branch
