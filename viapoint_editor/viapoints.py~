# -*- coding: utf-8 -*-

from parameters import *

import numpy as np

VIAPOINTS_TYPE = 1007
DEFAULT_OFFSET = -1.0

class Points():

    vp = np.array([])
    ts = np.array([])
    tau = np.array([])
    coef = np.array([])
    next = np.array([])

class ViaPoints(IParameter):

    def __init__(self):

        IParameter.__init__(self, "ViaPoints", VIAPOINTS_TYPE)

	
    def applyParameter(self, data):

        pass

    def min_jerk_spline(self, X, threshold, kind=1, draw=0):

        if (isinstance(X, list)):
            X = np.array(X, dtype=float)

        if (not isinstance(X, np.ndarray)):
            return None

        n_sp = 1
        n_data, n_traj = X.shape
        vpts = np.array([], dtype=Points)
        vpts = np.resize(vpts, (1, n_traj))

        for i in range(0, n_traj-1):
            pt = Points()
            pt.vp = [[X[0][i], 0, 0], [X[n_data-1][i], 0, 0]]
            pt.ts = 1
            pt.tau = n_data - 1
            pt.coef = np.zeros(6)
            pt.coef = self.via_point_spline_coef(pt)

            vpts[i] = pt

        
        bMSE = self.normalize(np.diag(np.cov(X)))

        Xp = self.via_point_reconstruct(vpts)
        res = X - Xp

        if (kind == 1):
            nMSE = np.diag(self.normalize(np.cov(res))) / bMSE
            mnMSE = np.mean(nMSE)
            crit = mnMSE
        elif (kind == 2):
            MSE = np.diag(self.normalize(np.cov(res)))
            mMSE = np.mean(MSE)
            crit = mMSE
        else:
            crit = np.sqrt(np.sum(np.power(res, 2), 2)).max()


        if (draw):
            pass

        
        while(crit > threshold):

            if (n_traj > 1):
                mat = np.sum(np.power(res, 2), axis=1).transpose().max()
                v, j = mat.max(0), mat.argmax(0)
            else:
                mat = np.power(res, 2)
                v, j = mat.max(0), mat.argmax(0)

            for n in range(n_sp-1, 0, -1):
                if ((vpts[i].ts[n] < j) and (vpts[0].ts[n]+vpts[0].tau[n] > j)):
                    break

            tau1 = j - vpts[0].ts[n]
            tau2 = vpts[0].ts[n] + vpts[1].tau[n] - j

            if ((tau1 < 1) or (tau2 < 1)):
                break

            for r in range(0, n_traj-1):
                vpts[r].vp = np.array([[vpts[r].vp[0:n][:]], [X[j][r], 0, 0], [vpts[r].vp[n+1:n_sp][:]]])
                vpts[r].ts = np.array([[vpts[r].ts[0:n]], [j], vpts[r].ts[n+1:n_sp-1]])
                vpts[r].tau = np.array([[vpts[r].tau[0:n-1]], [tau1], [tau2], [vpts[r].tau[n+1:n_sp-1]]])

                vpts[r].vp[:][1], vpts[r].vp[:][2] = self.optimal_via_points(vpts[r].vp[:][0], vpts[r].tau)

                vpts[r].coef = self.via_point_spline_coef(vpts[r])

            n_sp = n_sp + 1

            Xp = self.via_point_reconstruct(vpts)

            res = X - Xp
            
            if (kind == 1):
                nMSE = np.diag(self.normalize(np.cov(res))) / bMSE
                mnMSE = np.mean(nMSE)
                crit = mnMSE
            elif (kind == 2):
                MSE = np.diag(self.normalize(np.cov(res)))
                mMSE = np.mean(MSE)
                crit = mMSE
            else:
                crit = np.sqrt(np.sum(np.power(res, 2), 2)).max()

            if (draw):
                pass

        Xp, Xpd, Xpdd, Xpddd = via_point_reconstruct(vpts)

        if (draw):
            pass

        return (Xp, Xpd, Xpdd, Xpddd, vpts)
                

    def via_point_spline_coef(self, vpts):

        n_sp = vpts.tau.size
        coef = np.zeros(n_sp)
        
        for i in range(0, n_sp - 1):
            v = np.transpose([vpts.vp[i][:], vpts.vp[i+1][i]])
            tau = vpts.tau[i]
            A = np.array([[1, 0, 0, 0, 0, 0], \
                          [0, 1, 0, 0, 0, 0], \
                          [0, 0, 0.5, 0, 0, 0], \
                          np.divide([-20, -12*tau, -3*tau**2, 20, -8*tau, tau**2], 2*tau**3, dtype=float),
                          np.divide([30, 16*tau, 3*tau**2, -30, 14*tau, -2*tau**2], 2*tau**4, dtype=float),
                          np.divide([-12, -6*tau, -1*tau**2, 12, -6*tau, tau**2], 2*tau**5, dtype=float)],\
                         dtype=float)
            
            coef[i] = np.dot(A, v).transpose()
            
        return coef

    def optimal_via_points(self, pos, T):

        n_spline = T.size
        n_via = pos.size

        A = np.zeros((2*n_via, 2*n_via))
        B = np.zeros((n_via, 2*n_via))

        
        A[0][0] = 384.0 / T[0]**3
        A[0][0] = 336.0 / T[0]**3
        A[0][n_via] = 72.0 / T[0]**2
        A[0][n_via+1] = -48.0 / T[0]**2

        A[n_via-1][n_via-2] = 336.0 / T[n_spline-1]**3
        A[n_via-1][n_via-1] = 384.0 / T[n_spline-1]**3
        A[n_via-1][2*n_via-2] = 48.0 / T[n_spline-1]**2
        A[n_via-1][2*n_via-1] = -72.0 / T[n_spline-1]**2

        A[n_via][0] = 72.0 / T[0]**2
        A[n_via][1] = 48.0 / T[0]**2
        A[n_via][n_via] = 18.0 / T[0]
        A[n_via][n_via+1] = -6.0 / T[0]

        A[2*n_via - 1][n_via-2] = -48.0 / T[n_spline-1]**2
        A[2*n_via - 1][n_via-1] = -72.0 / T[n_spline-1]**2
        A[2*n_via - 1][2*n_via-2] = -6.0 / T[n_spline-1]
        A[2*n_via - 1][2*n_via-1] = 18.0 / T[n_spline-1]

        for i in range(1, n_via - 2):
            
            A[i][i-1] = 336.0 / T[i-1]**3
            A[i][i] = 384.0 / T[i-1]**3 + 384.0 / T[i]**3
            A[i][i+1] = 336.0 / T[i]**3

            A[i][n_via+i-1]   = 48.0 / T[i-1]**2
            A[i][n_via+i] = -72.0 / T[i-1]**2 + 72.0 / T[i]**2
            A[i][n_via+i+1] = -48.0 / T[i]**2
            
            A[n_via+i][i-1]   = -48.0 / T[i-1]**2
            A[n_via+i][i] = -72.0 / T[i-1]**2 + 72.0 / T[i]**2
            A[n_via+i][i+1] =  48.0 / T[i]**2
            
            A[n_via+i][n_via+i-1]   = -6.0 / T[i-1]
            A[n_via+i][n_via+i] = 18.0 / T[i-1] + 18.0 / T[i]
            A[n_via+i][n_via+i+1] = -6.0 / T[i]

        
        B[0][0] = 720.0 / T[0]**4
        B[0][0] = 720.0 / T[0]**4
        B[0][n_via] = 120.0 / T[0]**3
        B[0][n_via+1] = -120.0 / T[0]**3

        B[n_via-1][n_via-2] = -720.0 / T[n_spline-1]**4
        B[n_via-1][n_via-1] = -720.0 / T[n_spline-1]**4
        B[n_via-1][2*n_via-2] = -120.0 / T[n_spline-1]**3
        B[n_via-1][2*n_via-1] = 120.0 / T[n_spline-1]**3

        for i in range(1, n_via - 2):
            
            B[i][i-1] = -720.0 / T[i-1]**4
            B[i][i] = -720.0 / T[i-1]**4 + 720.0 / T[i]**4
            B[i][i+1] = 720.0 / T[i]**4

            B[i][n_via+i-1]   = -120.0 / T[i-1]**3
            B[i][n_via+i] = 120.0 / T[i-1]**3 + 120.0 / T[i]**3
            B[i][n_via+i+1] = -120.0 / T[i]**3

        B = B.transpose()
        res = np.dot((-1 * np.linalg.inv(A)), np.dot(B, pos))

        vel = res[0:n_via-1]
        acc = res[n_via, 2*n_via-1]

        return (vel, acc)

    def normalize(self, vector):

        return max(abs(vector.max()), abs(vector.min()))
        
    def via_point_reconstruct(self, vpts):
        
        n_traj = vpts.size
        n_sp = vpts[0].tau.size
        n_data = vpts[0].tau[n_sp-1] + vpts[0].ts[n_sp-1]

        Xp = np.zeros(np.vpts[0].tau.max())
        Xpd = np.zeros(np.vpts[0].tau.max())
        Xpdd= np.zeros(np.vpts[0].tau.max())
        Xpddd = np.zeros(np.vpts[0].tau.max())

        for j in range(0, n_sp-1):
            n = vpts[i].ts[j]
            t = np.range(0, vpts[0].tau[j]).transpose()
            T = np.array([np.ones(t.size), t, np.power(t, 2), np.power(t, 3), np.power(t, 4), np.power(t, 5)])

            C = vpts[0].coef[j].transpose()
            for i in range(1, n_traj-1):
                C = np.array([C, vpts[i].coef[j].transpose()])

            Xp[n:n+vpts[1].tau[j]] = np.dot(T, C)
            Xpd[n:n+vpts[1].tau[j]] = np.dot(T, C)[1:5]
            Xpdd[n:n+vpts[1].tau[j]] = np.dot(T, C)[2:5]
            Xpddd[n:n+vpts[1].tau[j]] = np.dot(T, C)[3:5]


def loadParameter():

    return ViaPoints()
