# -*- coding: utf-8 -*-

import numpy as np
import sys

def enum(*sequential, **named):
    enums = dict(zip(sequential, range(len(sequential))), **named)
    return type('Enum', (), enums)

OrderedListErrors = enum('OBJECT_NOT_FOUND')

class OrderedListException(Exception):
    def __init__(self, code=0, message=""):
        self.args = (code, message)

class OrderedList():

    def __init__(self):

        self._list = np.array([])
        self._order = np.array([])

    def _move(self, order, down):
        
        if (down):
            if (order == int(self.__order.max())): return
            value_to = order + 1
        else:
            if (order == int(self.__order.min())): return
            value_to = order - 1

        index_from_swap = np.where(self.__order == order)[0][0]
        index_to_swap = np.where(self.__order == value_to)[0][0]
        
        value_to_swap = self.__order[index_to_swap]
        self.__order[index_to_swap] = self.__order[index_from_swap]
        self.__order[index_from_swap] = value_to_swap

    def _remove(self, objType, obj):

        if (isinstance(obj, objType)):
            try:
                index = np.where(self.__list == obj)[0][0]
            except IndexError as e:
                raise OrderedListException(OrderedListErrors.OBJECT_NOT_FOUND)
        else:
            index = int(animationObj)

        order = self.__order[index]
        
        self.__list = np.delete(self.__list, index)
        self.__order = np.delete(self.__order, index)
        
        indexes_to_adjust = np.where(self.__order > order)[0]

        for index in indexes_to_adjust:
            self.__order[index] = self.__order[index] - 1

    def _add(self, objType, obj):

        if (isinstance(obj, objType)):

            order = 0
            if (self.__order.size > 0): order = int(self.__order.max()) + 1
            
            self.__list = np.append(self.__list, obj)
            self.__order = np.append(self.__order, [order])
        
    def moveUp(self, order):
        self._move(order, False)
        
    def moveDown(self, order):
        self._move(order, True)
