# -*- coding: utf-8 -*-

import numpy as np
import matplotlib.pyplot as plt

import time
import sys
import math
import threading
import ConfigParser

from animation import *
from window import *
from parameters import *
from signals import *
from wavsignal import *
from hdfsignal import *
from lpf import *

ANIMATION_TYPE_NONE = 0
ANIMATION_TYPE_WAV_FILE = 1
ANIMATION_TYPE_HDF_FILE = 2

DEFAULT_FILTER_FREQUENCY_HZ = 20

def enum(*sequential, **named):
    enums = dict(zip(sequential, range(len(sequential))), **named)
    return type('Enum', (), enums)
    
MainProgramErrors = enum('FILE_EMPTY', 'FILE_NOT_FOUND', 'INVALID_EXTENSION', 'INVALID_FORMAT', 'INVALID_PARAMETER')

class MainProgramException(Exception):
    def __init__(self, code=0, message=""):
        self.args = (code, message)

        
class MainProgram():

    def __init__(self):

        self.app, self.window = windowStart()
        
        self.__resetVars()

    def __resetVars(self):
        
        self.configs = ConfigParser.ConfigParser()
        self.__config_file = ""
        
        self.animationObject = Animation()
        self.signal = Signal()


        self.lpf = LPFParameter()
        self.lpf.setVariable("FREQUENCY", DEFAULT_FILTER_FREQUENCY_HZ)
        
        self.clearData()
        
        
    def clearData(self):
        
        self.__wav_file = ""
        self.__hdf_file = ""
        self.__hdf_branch = "/animation"
        self.animationObject.setAnimationData(np.array([]))
        self.signal.clearData()

        self.__animationType = ANIMATION_TYPE_NONE

    def __checkWAVFile(self, filepath):
        
        if (not os.path.isfile(filepath)):
            raise MainProgramException(MainProgramErrors.FILE_NOT_FOUND, "File not found!")

        name, extension = os.path.splitext(filepath)

        if (extension != ".wav"):
            raise MainProgramException(MainProgramErrors.INVALID_EXTENSION, "File extension must be .wav!")

        return True
        
    def getAnimationType(self):

        return self.__animationType

    def getWAVFile(self):

        return self.__wav_file

    def getHDFFile(self):

        return self.__hdf_file

    def getConfigFile(self):

        return self.__config_file

    def getAnimationBranch(self):

        return self.__hdf_branch
        
    def setAnimationType(self, animationType):

        self.__animationType = animationType
        
    def setWAVFile(self, wavfile):

        self.__checkWAVFile(wavfile)
        self.__wav_file = wavfile
        
    def setHDFFile(self, hdffile):

        self.__hdf_file = hdffile

    def setConfigFile(self, configfile):
        
        self.__config_file = configfile

        print self.__config_file
    def setAnimationBranch(self, branch):

        self.__hdf_branch = branch
        
    def __loadWAVFile(self):

        self.signal = WavSignal()
        self.signal.setFile(self.__wav_file)
        self.signal.loadFile()

        
    def __loadHDFFile(self):

        self.signal = HDFSignal()
        self.signal.setFile(self.__hdf_file)
        self.signal.loadFile()
        
    def initializeAnimation(self):

        if (self.__animationType == ANIMATION_TYPE_WAV_FILE):
            if (self.__wav_file != ""):
                self.__loadWAVFile()
            else:
                raise MainProgramException, MainProgramErrors.FILE_EMPTY
        elif (self.__animationType == ANIMATION_TYPE_HDF_FILE):
            if (self.__hdf_file != ""):
                self.__loadHDFFile()
            else:
                raise MainProgramException, MainProgramErrors.FILE_EMPTY
        else:
            pass

    def loadAnimation(self):

        fps = DEFAULT_FRAME_RATE
        print "signal size: ", self.signal.getData().size

        if (type(self.signal) is Signal): return

        if (type(self.signal) is WavSignal):

            self.signal.clearParameters()
            self.signal.addParameter(self.lpf)
            self.signal.generateAnimation()
            
            
        elif (type(self.signal) is HDFSignal):

            self.signal.setAnimationBranch(self.__hdf_branch)
            self.signal.loadData()
            self.signal.generateAnimation()
            self.signal.addOffset(0 - self.signal.getAnimationData().min())
            
            fps = self.signal.getFPS()

        self.signal.addOffset(-1)
        self.animationObject.setAnimationData(self.signal.getAnimationData())
        self.animationObject.setFPS(fps)

        self.animationObject.setAudioFile(self.__wav_file)
        print "Animation loaded! Size: ", self.signal.getAnimationData().size

    def setAnimationActions(self, onAnimationStart, onAnimationExecution, onAnimationFinish):
        #del self.__onAnimationStart, self.__onAnimationExecution, self.__onAnimationFinish
        
        self.__onAnimationStart = onAnimationStart
        self.__onAnimationExecution = onAnimationExecution
        self.__onAnimationFinish = onAnimationFinish
        
    def startAnimation(self):
        
        self.animationObject.startAnimation(self.__onAnimationStart, self.__onAnimationExecution, self.__onAnimationFinish)

    def animationAction(self):
        self.animationObject.setAudioFile(self.__wav_file)
        self.animationObject.playAudio()
        
    def loadConfigs(self):

        self.clearData()
        
        self.configs.read(self.__config_file)
        
        self.setAnimationType(self.configs.getint('General', 'animation_type'))
        self.setWAVFile(str(self.configs.get('General', 'audio_file')))
        self.setHDFFile(str(self.configs.get('General', 'hdf_file')))
        self.setAnimationBranch(str(self.configs.get('General', 'hdf_branch')))
        self.lpf.setVariable("FREQUENCY", self.configs.getint('General', 'filter_frequency_hz'))

    def writeConfigs(self):

        self.configs.set('General', 'audio_file', self.__wav_file)
        self.configs.set('General', 'hdf_file', self.__hdf_file)
        self.configs.set('General', 'animation_type', self.__animationType)
        self.configs.set('General', 'hdf_branch', self.__hdf_branch)
        self.configs.set('General', 'filter_frequency_hz', self.lpf.getVariable('FREQUENCY'))
        
        file_handle = open(self.__config_file, 'w')
        self.configs.write(file_handle)
