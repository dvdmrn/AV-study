# -*- coding: utf-8 -*-

from parameters import *

import scipy.signal as signal

import numpy as np
import matplotlib.pyplot as plt

LPF_TYPE = 1000
DEFAULT_LPF_FILTER_FREQUENCY_HZ = 20

ANIMATION_TYPE_NONE = 0
ANIMATION_TYPE_WAV_FILE = 1
ANIMATION_TYPE_HDF_FILE = 2

#New parameter class
#Every parameter class MUST inherit from IParameter and
#be formated in the following scope

class LPFParameter(IParameter):

    def __init__(self):

        #Initializes class as a parameter
        IParameter.__init__(self, "Low Pass Filter", LPF_TYPE)
	#Sets parameter variables. These variables can be accessed and changed by the user in the user interface.
	#You can insert an unlimited number of variables.
	#To add more variables, you can do something like this:
	#self._variables["VARIABLE_NAME"] = VALUE

        self._variables["FREQUENCY"] = DEFAULT_LPF_FILTER_FREQUENCY_HZ
        self._variables["ORDER"] = 1000.0

    def applyParameter(self, data):

	#This is the function that processes data. 
	#The input data is stored in the variable 'data'
	#You must return the processes data using 'return processed_data'
	#See example below:

        #Gets the data sampling rate
        if (self.getHiddenVariable('ANIMATION_TYPE') == ANIMATION_TYPE_WAV_FILE):
            fs = self.getHiddenVariable('AUDIO_FRAME_RATE')
        else:
            fs = self.getHiddenVariable('SIGNAL_RATE')

        nyquist_freq = fs / 2.0
            
        #low pass filter design
        filt = signal.firwin(self.getVariable("ORDER"), self.getVariable("FREQUENCY") / nyquist_freq)
        
        return signal.filtfilt(filt, [1.0], data)

#This is the function called by the animation player to load the
#parameter. You must implement this function and initialize
#the class you implemented above, as its instance will be returned
#to the main program

def loadParameter():

    lpf = LPFParameter()
    lpf.setVariable("FREQUENCY", 11)
    return lpf
