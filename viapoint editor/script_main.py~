# -*- coding: utf-8 -*-

#import pdb; pdb.set_trace()

import numpy as np

import matplotlib.pyplot as plt
import matplotlib.widgets as widgets

from matplotlib.patches import Polygon

import time
import sys
import math
import threading
import ConfigParser

# local imports
from animation import *
from window import *
from parameters import *
from signals import *
from wavsignal import *
from hdfsignal import *
from lpf import *

from mainanimation import *
from plotanimations import *

# global variables

CONFIG_FILE = 'config.ini'
MESSAGE_QUEUE_NAME = '/test_queue2'


global threads
global window

global main

def refreshUI():
    """
    Updates the UI labels with information from the audio file
    """
    
    if (main.getAnimationType() == ANIMATION_TYPE_WAV_FILE):
        window.duration.setText("Sound duration: " + str(main.signal.getTimeString()))
    else:
        window.duration.setText("Sound duration: -")
                                
    window.animationsizelabel.setText("Animation data size: " + str(len(main.signal.getAnimationData())))
    
def selectFile():
    """
    Opens the file dialog and returns the string with the file path
    """

    return str(QtGui.QFileDialog.getOpenFileName())
    
def selectAnimationType():
    """
    Opens the animation choice dialog and returns the option selected 
    """
    
    window.openAnimationChoiceDialog()

    if (window.form_animation_choice.wavType.isChecked()):
        return ANIMATION_TYPE_WAV_FILE
    elif (window.form_animation_choice.hdfType.isChecked()):
        return ANIMATION_TYPE_HDF_FILE
    else:
        return ANIMATION_TYPE_NONE


def selectBranch():
    """
    Opens a list dialog with all the branches available for selection and returns
    the selected option
    """

    selectedItem = ''
    items = False

    window.form_dataset.datalist.clear()
    nodes = main.signal.getHDFFile().walkNodes("/", "Array")
    
    for node in nodes:
        window.form_dataset.datalist.addItem(node._v_pathname)
        items = True

    if (not items):
        raise Exception("HDF File must contain at least one dataset!")
        
    window.form_dataset.exec_()

    return str(window.form_dataset.datalist.currentItem().text())


def plotAnimationExec():
    """
    (Deprecated) Shows the plot window
    """

    plt.show()
    plt.close()
    
def plotAnimation():
    """
    Reads the data from the animation object and plots if it is not empty
    """
    animation = main.animationObject.getAnimationData()
    
    if (animation.size > 0):

        #fig = plt.figure(1)
        slice = np.s_[::main.animationObject.getFPS() / 60]
        step = 1.0 / main.animationObject.getFPS()
        x = np.arange(0, animation.size * step, step)
        x_sliced = x[slice]
        data = list(zip(x_sliced, animation[slice]))

        fig, ax = plt.subplots(2, sharex=True)
        #p = DraggablePoints(ax[0], fig, data)
        ax[0].add_line(Line2D(x_sliced, animation[slice]))
        
        ax[0].set_xlim((x.min() - 2, x.max() + 2))
        ax[0].set_ylim((animation.min(), animation.max()))

        sig_data = main.signal.getData()[1024:,0]
        s_size = sig_data.size / animation[slice].size
        sig_data = sig_data[np.s_[::s_size]]
        sig_data = sig_data[:x_sliced.size]
        sig_data = sig_data / float(sig_data.max())
        
        ax[1].add_line(Line2D(x_sliced, sig_data))

        widget = widgets.MultiCursor(fig.canvas, ax, color='red', lw='1')
        
        #plt.plot(main.animationObject.getAnimationData())
        plt.show()
        #plt.close()
        
        #t = threading.Thread(target=plotAnimationExec)#, args=(fig))
        #threads.append(t)
        #t.start()


def changeButtonsStatus(status):
    """
    Changes the state of all buttons in the main window
    """
    
    window.selectfile.setEnabled(status)
    window.reloadanimation.setEnabled(status)
    window.clearanimation.setEnabled(status)
    window.plotamplitude.setEnabled(status)
    window.lpffrequency.setEnabled(status)
    window.startanimation.setEnabled(status)

        
def onAnimationStart():
    """
    Sets up the window when the animation starts running
    """

    changeButtonsStatus(False)
    
    window.startanimation.setText("Stop animation")
    window.startanimation.setEnabled(True)

    threads.append(main.animationObject.thread)


def onAnimationFinish():
    """
    Returns the window to it's initial state after animation finished
    """
    
    window.startanimation.setText("Start animation")
    changeButtonsStatus(True)

def clearVariables():
    """
    Clear global variables and UI
    """
    
    main.clearData()
    
    window.wavfile.setText("")

    changeButtonsStatus(False)
    window.selectfile.setEnabled(True)

def setupFiles():
    """
    Clears all data from Main object and starts loading all the audio and
    animation files again
    """
    
    wav_file = ""
    hdf_file = ""
    branch = ""
    
    main.clearData()
    
    while(wav_file == ''):
        wav_file = selectFile()

    main.setWAVFile(wav_file)
    window.wavfile.setText(wav_file)
    
    main.setAnimationType(selectAnimationType())

    if (main.getAnimationType() == ANIMATION_TYPE_WAV_FILE):

        main.lpf.setVariable("FREQUENCY", window.lpffrequency.value())
        defineEnvironment()
        
    elif (main.getAnimationType() == ANIMATION_TYPE_HDF_FILE):
        while(hdf_file == ''):
            hdf_file = selectFile()

        main.setHDFFile(hdf_file)
        main.initializeAnimation()

        while (branch == ''):
            branch = selectBranch()

        main.setAnimationBranch(branch)
        
        defineEnvironment()
    

def defineEnvironment():
    """
    Tries to load and setup the animation on Main object. If animation cannot be loaded,
    the function setupFiles() is called.
    """

    try:
        
        main.initializeAnimation()
        main.loadAnimation()
        
    except MainAnimationException as e:

        code, message = e.args

        if ( (code == MainAnimationErrors.FILE_EMPTY) or \
             (code == MainAnimationErrors.FILE_NOT_FOUND)
        ):
            setupFiles()
            
    except SignalException as e:

        code, message = e.args

        if ( (code == SignalErrors.FILE_EMPTY) or \
             (code == SignalErrors.FILE_NOT_FOUND) or \
             (code == SignalErrors.INVALID_EXTENSION) \
        ):
            setupFiles()

        elif ( (code == SignalErrors.INVALID_FORMAT) ):
            branch = ''
            
            while (branch == ''):
                branch = selectBranch()

            main.setAnimationBranch(branch)
            defineEnvironment()
            
    else:
        #success
        main.lpf.setVariable("FREQUENCY", int(window.lpffrequency.value()))
        #main.loadAnimation()
        changeButtonsStatus(True)

    
    
###################################################################
########################### MAIN PROGRAM ##########################
###################################################################


#########################
# set initial variables #
#########################

main = MainAnimation()

threads = []

##########################
# configures main window #
##########################

app, window = windowStartOld()


window.setFixedSize(window.geometry().width(), window.geometry().height())

changeButtonsStatus(False)

window.selectfile.setEnabled(True)
window.lpffrequency.setEnabled(True)

window.setWindowTitle("OpenGL Spheres Controller")

window.selectfile.clicked.connect(setupFiles)

window.startanimation.clicked.connect(main.startAnimation)
window.plotamplitude.clicked.connect(plotAnimation)
window.clearanimation.clicked.connect(main.animationObject.clearAnimationSignal)

window.reloadanimation.clicked.connect(defineEnvironment)
window.actionEdit.triggered.connect(window.openParametersDialog)


######################
# loads configs file #
######################

clearVariables()

try:
    
    main.setConfigFile(CONFIG_FILE)
    main.loadConfigs()

    window.statusbar.showMessage("Config file loaded!")
    
except:
    
    window.statusbar.showMessage("Could not load config file!")

    
########################
# extra configurations #
########################

main.animationObject.setQueueName(MESSAGE_QUEUE_NAME)
window.lpffrequency.setValue(main.lpf.getVariable('FREQUENCY'))

defineEnvironment()

window.wavfile.setText(main.getWAVFile())
main.setAnimationActions(onAnimationStart, main.animationAction, onAnimationFinish)


#####################
# opens main window #
#####################

app.exec_()


####################################
# reset variables and save configs #
####################################

threads = []
main.writeConfigs()

sys.exit()
